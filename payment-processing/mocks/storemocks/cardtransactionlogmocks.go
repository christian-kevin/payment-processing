// Code generated by MockGen. DO NOT EDIT.
// Source: spenmo/payment-processing/payment-processing/internal/pkg/store/mysql (interfaces: CardTransactionLogStore)

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
	store "spenmo/payment-processing/payment-processing/internal/pkg/store"
	mysql "spenmo/payment-processing/payment-processing/internal/pkg/store/mysql"
)

// MockCardTransactionLogStore is a mock of CardTransactionLogStore interface
type MockCardTransactionLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockCardTransactionLogStoreMockRecorder
}

// MockCardTransactionLogStoreMockRecorder is the mock recorder for MockCardTransactionLogStore
type MockCardTransactionLogStoreMockRecorder struct {
	mock *MockCardTransactionLogStore
}

// NewMockCardTransactionLogStore creates a new mock instance
func NewMockCardTransactionLogStore(ctrl *gomock.Controller) *MockCardTransactionLogStore {
	mock := &MockCardTransactionLogStore{ctrl: ctrl}
	mock.recorder = &MockCardTransactionLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardTransactionLogStore) EXPECT() *MockCardTransactionLogStoreMockRecorder {
	return m.recorder
}

// BeginX mocks base method
func (m *MockCardTransactionLogStore) BeginX() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginX")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginX indicates an expected call of BeginX
func (mr *MockCardTransactionLogStoreMockRecorder) BeginX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginX", reflect.TypeOf((*MockCardTransactionLogStore)(nil).BeginX))
}

// CommitX mocks base method
func (m *MockCardTransactionLogStore) CommitX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitX indicates an expected call of CommitX
func (mr *MockCardTransactionLogStoreMockRecorder) CommitX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitX", reflect.TypeOf((*MockCardTransactionLogStore)(nil).CommitX), arg0)
}

// CreateLog mocks base method
func (m *MockCardTransactionLogStore) CreateLog(arg0 context.Context, arg1 mysql.Execer, arg2 *store.CardTransactionLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLog indicates an expected call of CreateLog
func (mr *MockCardTransactionLogStoreMockRecorder) CreateLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockCardTransactionLogStore)(nil).CreateLog), arg0, arg1, arg2)
}

// DBX mocks base method
func (m *MockCardTransactionLogStore) DBX() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBX")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// DBX indicates an expected call of DBX
func (mr *MockCardTransactionLogStoreMockRecorder) DBX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBX", reflect.TypeOf((*MockCardTransactionLogStore)(nil).DBX))
}

// RollbackX mocks base method
func (m *MockCardTransactionLogStore) RollbackX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackX indicates an expected call of RollbackX
func (mr *MockCardTransactionLogStoreMockRecorder) RollbackX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackX", reflect.TypeOf((*MockCardTransactionLogStore)(nil).RollbackX), arg0)
}
