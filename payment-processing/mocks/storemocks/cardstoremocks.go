// Code generated by MockGen. DO NOT EDIT.
// Source: spenmo/payment-processing/payment-processing/internal/pkg/store/mysql (interfaces: CardStore)

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
	store "spenmo/payment-processing/payment-processing/internal/pkg/store"
	mysql "spenmo/payment-processing/payment-processing/internal/pkg/store/mysql"
)

// MockCardStore is a mock of CardStore interface
type MockCardStore struct {
	ctrl     *gomock.Controller
	recorder *MockCardStoreMockRecorder
}

// MockCardStoreMockRecorder is the mock recorder for MockCardStore
type MockCardStoreMockRecorder struct {
	mock *MockCardStore
}

// NewMockCardStore creates a new mock instance
func NewMockCardStore(ctrl *gomock.Controller) *MockCardStore {
	mock := &MockCardStore{ctrl: ctrl}
	mock.recorder = &MockCardStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCardStore) EXPECT() *MockCardStoreMockRecorder {
	return m.recorder
}

// BeginX mocks base method
func (m *MockCardStore) BeginX() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginX")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginX indicates an expected call of BeginX
func (mr *MockCardStoreMockRecorder) BeginX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginX", reflect.TypeOf((*MockCardStore)(nil).BeginX))
}

// CommitX mocks base method
func (m *MockCardStore) CommitX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitX indicates an expected call of CommitX
func (mr *MockCardStoreMockRecorder) CommitX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitX", reflect.TypeOf((*MockCardStore)(nil).CommitX), arg0)
}

// CreateCard mocks base method
func (m *MockCardStore) CreateCard(arg0 context.Context, arg1 mysql.Execer, arg2 *store.Card) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCard", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCard indicates an expected call of CreateCard
func (mr *MockCardStoreMockRecorder) CreateCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCard", reflect.TypeOf((*MockCardStore)(nil).CreateCard), arg0, arg1, arg2)
}

// DBX mocks base method
func (m *MockCardStore) DBX() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBX")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// DBX indicates an expected call of DBX
func (mr *MockCardStoreMockRecorder) DBX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBX", reflect.TypeOf((*MockCardStore)(nil).DBX))
}

// DeleteCard mocks base method
func (m *MockCardStore) DeleteCard(arg0 context.Context, arg1 mysql.Execer, arg2 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCard", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCard indicates an expected call of DeleteCard
func (mr *MockCardStoreMockRecorder) DeleteCard(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCard", reflect.TypeOf((*MockCardStore)(nil).DeleteCard), arg0, arg1, arg2)
}

// GetCardByID mocks base method
func (m *MockCardStore) GetCardByID(arg0 context.Context, arg1 mysql.Querier, arg2 int64) (*store.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*store.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardByID indicates an expected call of GetCardByID
func (mr *MockCardStoreMockRecorder) GetCardByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardByID", reflect.TypeOf((*MockCardStore)(nil).GetCardByID), arg0, arg1, arg2)
}

// GetCardByNumberAndExpiryDate mocks base method
func (m *MockCardStore) GetCardByNumberAndExpiryDate(arg0 context.Context, arg1 mysql.Querier, arg2, arg3 string) (*store.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCardByNumberAndExpiryDate", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*store.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCardByNumberAndExpiryDate indicates an expected call of GetCardByNumberAndExpiryDate
func (mr *MockCardStoreMockRecorder) GetCardByNumberAndExpiryDate(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCardByNumberAndExpiryDate", reflect.TypeOf((*MockCardStore)(nil).GetCardByNumberAndExpiryDate), arg0, arg1, arg2, arg3)
}

// GetCards mocks base method
func (m *MockCardStore) GetCards(arg0 context.Context, arg1 mysql.Querier, arg2 int64) ([]*store.Card, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCards", arg0, arg1, arg2)
	ret0, _ := ret[0].([]*store.Card)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCards indicates an expected call of GetCards
func (mr *MockCardStoreMockRecorder) GetCards(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCards", reflect.TypeOf((*MockCardStore)(nil).GetCards), arg0, arg1, arg2)
}

// RollbackX mocks base method
func (m *MockCardStore) RollbackX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackX indicates an expected call of RollbackX
func (mr *MockCardStoreMockRecorder) RollbackX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackX", reflect.TypeOf((*MockCardStore)(nil).RollbackX), arg0)
}
