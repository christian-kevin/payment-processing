// Code generated by MockGen. DO NOT EDIT.
// Source: spenmo/payment-processing/payment-processing/internal/pkg/store/mysql (interfaces: WalletBalanceLogStore)

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
	store "spenmo/payment-processing/payment-processing/internal/pkg/store"
	mysql "spenmo/payment-processing/payment-processing/internal/pkg/store/mysql"
)

// MockWalletBalanceLogStore is a mock of WalletBalanceLogStore interface
type MockWalletBalanceLogStore struct {
	ctrl     *gomock.Controller
	recorder *MockWalletBalanceLogStoreMockRecorder
}

// MockWalletBalanceLogStoreMockRecorder is the mock recorder for MockWalletBalanceLogStore
type MockWalletBalanceLogStoreMockRecorder struct {
	mock *MockWalletBalanceLogStore
}

// NewMockWalletBalanceLogStore creates a new mock instance
func NewMockWalletBalanceLogStore(ctrl *gomock.Controller) *MockWalletBalanceLogStore {
	mock := &MockWalletBalanceLogStore{ctrl: ctrl}
	mock.recorder = &MockWalletBalanceLogStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletBalanceLogStore) EXPECT() *MockWalletBalanceLogStoreMockRecorder {
	return m.recorder
}

// BeginX mocks base method
func (m *MockWalletBalanceLogStore) BeginX() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginX")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginX indicates an expected call of BeginX
func (mr *MockWalletBalanceLogStoreMockRecorder) BeginX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginX", reflect.TypeOf((*MockWalletBalanceLogStore)(nil).BeginX))
}

// CommitX mocks base method
func (m *MockWalletBalanceLogStore) CommitX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitX indicates an expected call of CommitX
func (mr *MockWalletBalanceLogStoreMockRecorder) CommitX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitX", reflect.TypeOf((*MockWalletBalanceLogStore)(nil).CommitX), arg0)
}

// CreateLog mocks base method
func (m *MockWalletBalanceLogStore) CreateLog(arg0 context.Context, arg1 mysql.Execer, arg2 *store.WalletBalanceLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLog", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateLog indicates an expected call of CreateLog
func (mr *MockWalletBalanceLogStoreMockRecorder) CreateLog(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLog", reflect.TypeOf((*MockWalletBalanceLogStore)(nil).CreateLog), arg0, arg1, arg2)
}

// DBX mocks base method
func (m *MockWalletBalanceLogStore) DBX() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBX")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// DBX indicates an expected call of DBX
func (mr *MockWalletBalanceLogStoreMockRecorder) DBX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBX", reflect.TypeOf((*MockWalletBalanceLogStore)(nil).DBX))
}

// RollbackX mocks base method
func (m *MockWalletBalanceLogStore) RollbackX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackX indicates an expected call of RollbackX
func (mr *MockWalletBalanceLogStoreMockRecorder) RollbackX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackX", reflect.TypeOf((*MockWalletBalanceLogStore)(nil).RollbackX), arg0)
}
