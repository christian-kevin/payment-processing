// Code generated by MockGen. DO NOT EDIT.
// Source: spenmo/payment-processing/payment-processing/internal/pkg/store/mysql (interfaces: WalletStore)

// Package storemocks is a generated GoMock package.
package storemocks

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	sqlx "github.com/jmoiron/sqlx"
	reflect "reflect"
	store "spenmo/payment-processing/payment-processing/internal/pkg/store"
	mysql "spenmo/payment-processing/payment-processing/internal/pkg/store/mysql"
)

// MockWalletStore is a mock of WalletStore interface
type MockWalletStore struct {
	ctrl     *gomock.Controller
	recorder *MockWalletStoreMockRecorder
}

// MockWalletStoreMockRecorder is the mock recorder for MockWalletStore
type MockWalletStoreMockRecorder struct {
	mock *MockWalletStore
}

// NewMockWalletStore creates a new mock instance
func NewMockWalletStore(ctrl *gomock.Controller) *MockWalletStore {
	mock := &MockWalletStore{ctrl: ctrl}
	mock.recorder = &MockWalletStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWalletStore) EXPECT() *MockWalletStoreMockRecorder {
	return m.recorder
}

// BeginX mocks base method
func (m *MockWalletStore) BeginX() (*sqlx.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginX")
	ret0, _ := ret[0].(*sqlx.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BeginX indicates an expected call of BeginX
func (mr *MockWalletStoreMockRecorder) BeginX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginX", reflect.TypeOf((*MockWalletStore)(nil).BeginX))
}

// CommitX mocks base method
func (m *MockWalletStore) CommitX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitX indicates an expected call of CommitX
func (mr *MockWalletStoreMockRecorder) CommitX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitX", reflect.TypeOf((*MockWalletStore)(nil).CommitX), arg0)
}

// CreateWallet mocks base method
func (m *MockWalletStore) CreateWallet(arg0 context.Context, arg1 mysql.Execer, arg2 *store.Wallet) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1, arg2)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet
func (mr *MockWalletStoreMockRecorder) CreateWallet(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletStore)(nil).CreateWallet), arg0, arg1, arg2)
}

// DBX mocks base method
func (m *MockWalletStore) DBX() *sqlx.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DBX")
	ret0, _ := ret[0].(*sqlx.DB)
	return ret0
}

// DBX indicates an expected call of DBX
func (mr *MockWalletStoreMockRecorder) DBX() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DBX", reflect.TypeOf((*MockWalletStore)(nil).DBX))
}

// GetWalletByID mocks base method
func (m *MockWalletStore) GetWalletByID(arg0 context.Context, arg1 mysql.Querier, arg2 int64) (*store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByID indicates an expected call of GetWalletByID
func (mr *MockWalletStoreMockRecorder) GetWalletByID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByID", reflect.TypeOf((*MockWalletStore)(nil).GetWalletByID), arg0, arg1, arg2)
}

// GetWalletByUserID mocks base method
func (m *MockWalletStore) GetWalletByUserID(arg0 context.Context, arg1 mysql.Querier, arg2 int64) (*store.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWalletByUserID", arg0, arg1, arg2)
	ret0, _ := ret[0].(*store.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWalletByUserID indicates an expected call of GetWalletByUserID
func (mr *MockWalletStoreMockRecorder) GetWalletByUserID(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWalletByUserID", reflect.TypeOf((*MockWalletStore)(nil).GetWalletByUserID), arg0, arg1, arg2)
}

// ModifyBalance mocks base method
func (m *MockWalletStore) ModifyBalance(arg0 context.Context, arg1 mysql.Execer, arg2, arg3 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyBalance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyBalance indicates an expected call of ModifyBalance
func (mr *MockWalletStoreMockRecorder) ModifyBalance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyBalance", reflect.TypeOf((*MockWalletStore)(nil).ModifyBalance), arg0, arg1, arg2, arg3)
}

// RollbackX mocks base method
func (m *MockWalletStore) RollbackX(arg0 *sqlx.Tx) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackX", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackX indicates an expected call of RollbackX
func (mr *MockWalletStoreMockRecorder) RollbackX(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackX", reflect.TypeOf((*MockWalletStore)(nil).RollbackX), arg0)
}
