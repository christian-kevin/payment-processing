// Code generated by MockGen. DO NOT EDIT.
// Source: spenmo/payment-processing/payment-processing/internal/pkg/store/redis (interfaces: RWalletStore)

// Package redismocks is a generated GoMock package.
package redismocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRWalletStore is a mock of RWalletStore interface
type MockRWalletStore struct {
	ctrl     *gomock.Controller
	recorder *MockRWalletStoreMockRecorder
}

// MockRWalletStoreMockRecorder is the mock recorder for MockRWalletStore
type MockRWalletStoreMockRecorder struct {
	mock *MockRWalletStore
}

// NewMockRWalletStore creates a new mock instance
func NewMockRWalletStore(ctrl *gomock.Controller) *MockRWalletStore {
	mock := &MockRWalletStore{ctrl: ctrl}
	mock.recorder = &MockRWalletStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRWalletStore) EXPECT() *MockRWalletStoreMockRecorder {
	return m.recorder
}

// LockCreateWallet mocks base method
func (m *MockRWalletStore) LockCreateWallet(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockCreateWallet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockCreateWallet indicates an expected call of LockCreateWallet
func (mr *MockRWalletStoreMockRecorder) LockCreateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockCreateWallet", reflect.TypeOf((*MockRWalletStore)(nil).LockCreateWallet), arg0)
}

// LockUpdateWallet mocks base method
func (m *MockRWalletStore) LockUpdateWallet(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockUpdateWallet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// LockUpdateWallet indicates an expected call of LockUpdateWallet
func (mr *MockRWalletStoreMockRecorder) LockUpdateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockUpdateWallet", reflect.TypeOf((*MockRWalletStore)(nil).LockUpdateWallet), arg0)
}

// ReleaseLockCreateWallet mocks base method
func (m *MockRWalletStore) ReleaseLockCreateWallet(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLockCreateWallet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLockCreateWallet indicates an expected call of ReleaseLockCreateWallet
func (mr *MockRWalletStoreMockRecorder) ReleaseLockCreateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockCreateWallet", reflect.TypeOf((*MockRWalletStore)(nil).ReleaseLockCreateWallet), arg0)
}

// ReleaseLockUpdateWallet mocks base method
func (m *MockRWalletStore) ReleaseLockUpdateWallet(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseLockUpdateWallet", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReleaseLockUpdateWallet indicates an expected call of ReleaseLockUpdateWallet
func (mr *MockRWalletStoreMockRecorder) ReleaseLockUpdateWallet(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseLockUpdateWallet", reflect.TypeOf((*MockRWalletStore)(nil).ReleaseLockUpdateWallet), arg0)
}
